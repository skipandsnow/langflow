{
    "data": {
        "edges": [
            {
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "TextInput",
                        "id": "TextInput-DbgJ3",
                        "name": "text",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "instructions",
                        "id": "Prompt-jJ1i7",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-TextInput-DbgJ3{œdataTypeœ:œTextInputœ,œidœ:œTextInput-DbgJ3œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-jJ1i7{œfieldNameœ:œinstructionsœ,œidœ:œPrompt-jJ1i7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "source": "TextInput-DbgJ3",
                "sourceHandle": "{œdataTypeœ: œTextInputœ, œidœ: œTextInput-DbgJ3œ, œnameœ: œtextœ, œoutput_typesœ: [œMessageœ]}",
                "target": "Prompt-jJ1i7",
                "targetHandle": "{œfieldNameœ: œinstructionsœ, œidœ: œPrompt-jJ1i7œ, œinputTypesœ: [œMessageœ, œTextœ], œtypeœ: œstrœ}"
            },
            {
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "URL",
                        "id": "URL-43SB8",
                        "name": "data",
                        "output_types": [
                            "Data"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-34pEF",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    }
                },
                "id": "reactflow__edge-URL-43SB8{œdataTypeœ:œURLœ,œidœ:œURL-43SB8œ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-34pEF{œfieldNameœ:œdataœ,œidœ:œParseData-34pEFœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "selected": false,
                "source": "URL-43SB8",
                "sourceHandle": "{œdataTypeœ: œURLœ, œidœ: œURL-43SB8œ, œnameœ: œdataœ, œoutput_typesœ: [œDataœ]}",
                "target": "ParseData-34pEF",
                "targetHandle": "{œfieldNameœ: œdataœ, œidœ: œParseData-34pEFœ, œinputTypesœ: [œDataœ], œtypeœ: œotherœ}"
            },
            {
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "URL",
                        "id": "URL-eFIqb",
                        "name": "data",
                        "output_types": [
                            "Data"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "data",
                        "id": "ParseData-iAHWq",
                        "inputTypes": [
                            "Data"
                        ],
                        "type": "other"
                    }
                },
                "id": "reactflow__edge-URL-eFIqb{œdataTypeœ:œURLœ,œidœ:œURL-eFIqbœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-ParseData-iAHWq{œfieldNameœ:œdataœ,œidœ:œParseData-iAHWqœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
                "source": "URL-eFIqb",
                "sourceHandle": "{œdataTypeœ: œURLœ, œidœ: œURL-eFIqbœ, œnameœ: œdataœ, œoutput_typesœ: [œDataœ]}",
                "target": "ParseData-iAHWq",
                "targetHandle": "{œfieldNameœ: œdataœ, œidœ: œParseData-iAHWqœ, œinputTypesœ: [œDataœ], œtypeœ: œotherœ}"
            },
            {
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "ParseData",
                        "id": "ParseData-34pEF",
                        "name": "text",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "reference_2",
                        "id": "Prompt-jJ1i7",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-ParseData-34pEF{œdataTypeœ:œParseDataœ,œidœ:œParseData-34pEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-jJ1i7{œfieldNameœ:œreference_2œ,œidœ:œPrompt-jJ1i7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "source": "ParseData-34pEF",
                "sourceHandle": "{œdataTypeœ: œParseDataœ, œidœ: œParseData-34pEFœ, œnameœ: œtextœ, œoutput_typesœ: [œMessageœ]}",
                "target": "Prompt-jJ1i7",
                "targetHandle": "{œfieldNameœ: œreference_2œ, œidœ: œPrompt-jJ1i7œ, œinputTypesœ: [œMessageœ, œTextœ], œtypeœ: œstrœ}"
            },
            {
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "ParseData",
                        "id": "ParseData-iAHWq",
                        "name": "text",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "reference_1",
                        "id": "Prompt-jJ1i7",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-ParseData-iAHWq{œdataTypeœ:œParseDataœ,œidœ:œParseData-iAHWqœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-jJ1i7{œfieldNameœ:œreference_1œ,œidœ:œPrompt-jJ1i7œ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "source": "ParseData-iAHWq",
                "sourceHandle": "{œdataTypeœ: œParseDataœ, œidœ: œParseData-iAHWqœ, œnameœ: œtextœ, œoutput_typesœ: [œMessageœ]}",
                "target": "Prompt-jJ1i7",
                "targetHandle": "{œfieldNameœ: œreference_1œ, œidœ: œPrompt-jJ1i7œ, œinputTypesœ: [œMessageœ, œTextœ], œtypeœ: œstrœ}"
            },
            {
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "OpenAIModel",
                        "id": "OpenAIModel-slJZS",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-LkJX7",
                        "inputTypes": [
                            "Message",
                            "str"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-OpenAIModel-slJZS{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-slJZSœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-LkJX7{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-LkJX7œ,œinputTypesœ:[œMessageœ,œstrœ],œtypeœ:œstrœ}",
                "source": "OpenAIModel-slJZS",
                "sourceHandle": "{œdataTypeœ: œOpenAIModelœ, œidœ: œOpenAIModel-slJZSœ, œnameœ: œtext_outputœ, œoutput_typesœ: [œMessageœ]}",
                "target": "ChatOutput-LkJX7",
                "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œChatOutput-LkJX7œ, œinputTypesœ: [œMessageœ, œstrœ], œtypeœ: œstrœ}"
            },
            {
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-jJ1i7",
                        "name": "prompt",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "OpenAIModel-slJZS",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-Prompt-jJ1i7{œdataTypeœ:œPromptœ,œidœ:œPrompt-jJ1i7œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-slJZS{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-slJZSœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "source": "Prompt-jJ1i7",
                "sourceHandle": "{œdataTypeœ: œPromptœ, œidœ: œPrompt-jJ1i7œ, œnameœ: œpromptœ, œoutput_typesœ: [œMessageœ]}",
                "target": "OpenAIModel-slJZS",
                "targetHandle": "{œfieldNameœ: œinput_valueœ, œidœ: œOpenAIModel-slJZSœ, œinputTypesœ: [œMessageœ], œtypeœ: œstrœ}"
            }
        ],
        "nodes": [
            {
                "data": {
                    "description": "Create a prompt template with dynamic variables.",
                    "display_name": "Prompt",
                    "id": "Prompt-jJ1i7",
                    "node": {
                        "base_classes": [
                            "object",
                            "str",
                            "Text"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {
                            "template": [
                                "reference_1",
                                "reference_2",
                                "instructions"
                            ]
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "documentation": "",
                        "error": null,
                        "field_order": [],
                        "frozen": false,
                        "full_path": null,
                        "icon": "prompts",
                        "is_composition": null,
                        "is_input": null,
                        "is_output": null,
                        "name": "",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Prompt Message",
                                "method": "build_prompt",
                                "name": "prompt",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n"
                            },
                            "instructions": {
                                "advanced": false,
                                "display_name": "instructions",
                                "dynamic": false,
                                "field_type": "str",
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "instructions",
                                "password": false,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "reference_1": {
                                "advanced": false,
                                "display_name": "reference_1",
                                "dynamic": false,
                                "field_type": "str",
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "reference_1",
                                "password": false,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "reference_2": {
                                "advanced": false,
                                "display_name": "reference_2",
                                "dynamic": false,
                                "field_type": "str",
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "reference_2",
                                "password": false,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "template": {
                                "advanced": false,
                                "display_name": "Template",
                                "dynamic": false,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Text"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": false,
                                "name": "template",
                                "password": false,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "prompt",
                                "value": "Reference 1:\n\n{reference_1}\n\n---\n\nReference 2:\n\n{reference_2}\n\n---\n\n{instructions}\n\nBlog: \n\n\n"
                            }
                        }
                    },
                    "type": "Prompt"
                },
                "dragging": false,
                "height": 619,
                "id": "Prompt-jJ1i7",
                "position": {
                    "x": 1378.0386633467044,
                    "y": 547.0254869963999
                },
                "positionAbsolute": {
                    "x": 1378.0386633467044,
                    "y": 547.0254869963999
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "id": "URL-43SB8",
                    "node": {
                        "base_classes": [
                            "Record"
                        ],
                        "beta": false,
                        "custom_fields": {
                            "urls": null
                        },
                        "description": "Fetch content from one or more URLs.",
                        "display_name": "URL",
                        "documentation": "",
                        "field_formatters": {},
                        "field_order": [],
                        "frozen": false,
                        "icon": "layout-template",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Data",
                                "method": "fetch_content",
                                "name": "data",
                                "selected": "Data",
                                "types": [
                                    "Data"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "import re\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.io import Output, MessageTextInput\nfrom langflow.schema import Data\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            info=\"Enter one or more URLs, separated by commas.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"\n        Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(http://|https://)?\"  # http:// or https://\n            r\"(([a-zA-Z0-9\\.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,}))\"  # top-level domain\n            r\"(:[0-9]{1,5})?\"  # optional port\n            r\"(\\/.*)?$\"  # optional path\n        )\n\n        if not re.match(url_regex, string):\n            raise ValueError(f\"Invalid URL: {string}\")\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n"
                            },
                            "urls": {
                                "advanced": false,
                                "display_name": "URLs",
                                "dynamic": false,
                                "info": "Enter one or more URLs, separated by commas.",
                                "list": true,
                                "load_from_db": false,
                                "name": "urls",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": [
                                    "https://www.promptingguide.ai/introduction/basics"
                                ]
                            }
                        }
                    },
                    "type": "URL"
                },
                "dragging": false,
                "height": 301,
                "id": "URL-43SB8",
                "position": {
                    "x": 129.9069887328102,
                    "y": 1026.1629590683015
                },
                "positionAbsolute": {
                    "x": 129.9069887328102,
                    "y": 1026.1629590683015
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "id": "URL-eFIqb",
                    "node": {
                        "base_classes": [
                            "Record"
                        ],
                        "beta": false,
                        "custom_fields": {
                            "urls": null
                        },
                        "description": "Fetch content from one or more URLs.",
                        "display_name": "URL",
                        "documentation": "",
                        "field_formatters": {},
                        "field_order": [],
                        "frozen": false,
                        "icon": "layout-template",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Data",
                                "method": "fetch_content",
                                "name": "data",
                                "selected": "Data",
                                "types": [
                                    "Data"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "import re\n\nfrom langchain_community.document_loaders.web_base import WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.io import Output, MessageTextInput\nfrom langflow.schema import Data\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Fetch content from one or more URLs.\"\n    icon = \"layout-template\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            info=\"Enter one or more URLs, separated by commas.\",\n            is_list=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"\n        Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(http://|https://)?\"  # http:// or https://\n            r\"(([a-zA-Z0-9\\.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,}))\"  # top-level domain\n            r\"(:[0-9]{1,5})?\"  # optional port\n            r\"(\\/.*)?$\"  # optional path\n        )\n\n        if not re.match(url_regex, string):\n            raise ValueError(f\"Invalid URL: {string}\")\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n"
                            },
                            "urls": {
                                "advanced": false,
                                "display_name": "URLs",
                                "dynamic": false,
                                "info": "Enter one or more URLs, separated by commas.",
                                "list": true,
                                "load_from_db": false,
                                "name": "urls",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": [
                                    "https://www.promptingguide.ai/techniques/prompt_chaining"
                                ]
                            }
                        }
                    },
                    "type": "URL"
                },
                "dragging": false,
                "height": 301,
                "id": "URL-eFIqb",
                "position": {
                    "x": 109.01828882212544,
                    "y": 635.7038211214808
                },
                "positionAbsolute": {
                    "x": 109.01828882212544,
                    "y": 635.7038211214808
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "description": "Get text inputs from the Playground.",
                    "display_name": "Instructions",
                    "edited": false,
                    "id": "TextInput-DbgJ3",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Get text inputs from the Playground.",
                        "display_name": "Instructions",
                        "documentation": "",
                        "edited": true,
                        "field_order": [
                            "input_value"
                        ],
                        "frozen": false,
                        "icon": "type",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Text",
                                "method": "text_response",
                                "name": "text",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import Output, MessageTextInput\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        return message\n"
                            },
                            "input_value": {
                                "advanced": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Text to be passed as input.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": "Use the references above for style to write a new blog/tutorial about prompt engineering techniques. Suggest non-covered topics."
                            }
                        }
                    },
                    "type": "TextInput"
                },
                "dragging": false,
                "height": 309,
                "id": "TextInput-DbgJ3",
                "position": {
                    "x": 668.3436449795839,
                    "y": 213.40493638517057
                },
                "positionAbsolute": {
                    "x": 668.3436449795839,
                    "y": 213.40493638517057
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "id": "ParseData-34pEF",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "documentation": "",
                        "field_order": [
                            "data",
                            "template",
                            "sep"
                        ],
                        "frozen": false,
                        "icon": "braces",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Text",
                                "method": "parse_data",
                                "name": "text",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n"
                            },
                            "data": {
                                "advanced": false,
                                "display_name": "Data",
                                "dynamic": false,
                                "info": "The data to convert to text.",
                                "input_types": [
                                    "Data"
                                ],
                                "list": false,
                                "name": "data",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "other",
                                "value": ""
                            },
                            "sep": {
                                "advanced": true,
                                "display_name": "Separator",
                                "dynamic": false,
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "sep",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": "---"
                            },
                            "template": {
                                "advanced": false,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                "multiline": true,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": "{text}"
                            }
                        }
                    },
                    "type": "ParseData"
                },
                "dragging": false,
                "height": 377,
                "id": "ParseData-34pEF",
                "position": {
                    "x": 697.109388389247,
                    "y": 993.1273555676513
                },
                "positionAbsolute": {
                    "x": 697.109388389247,
                    "y": 993.1273555676513
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "id": "ParseData-iAHWq",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "documentation": "",
                        "field_order": [
                            "data",
                            "template",
                            "sep"
                        ],
                        "frozen": false,
                        "icon": "braces",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Text",
                                "method": "parse_data",
                                "name": "text",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n"
                            },
                            "data": {
                                "advanced": false,
                                "display_name": "Data",
                                "dynamic": false,
                                "info": "The data to convert to text.",
                                "input_types": [
                                    "Data"
                                ],
                                "list": false,
                                "name": "data",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "other",
                                "value": ""
                            },
                            "sep": {
                                "advanced": true,
                                "display_name": "Separator",
                                "dynamic": false,
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "sep",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": "---"
                            },
                            "template": {
                                "advanced": false,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                "multiline": true,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": "{text}"
                            }
                        }
                    },
                    "type": "ParseData"
                },
                "dragging": false,
                "height": 377,
                "id": "ParseData-iAHWq",
                "position": {
                    "x": 674.3059180422167,
                    "y": 594.1081812719365
                },
                "positionAbsolute": {
                    "x": 674.3059180422167,
                    "y": 594.1081812719365
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "description": "Generates text using OpenAI LLMs.",
                    "display_name": "OpenAI",
                    "edited": false,
                    "id": "OpenAIModel-slJZS",
                    "node": {
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Generates text using OpenAI LLMs.",
                        "display_name": "OpenAI",
                        "documentation": "",
                        "edited": true,
                        "field_order": [
                            "input_value",
                            "max_tokens",
                            "model_kwargs",
                            "output_schema",
                            "model_name",
                            "openai_api_base",
                            "openai_api_key",
                            "temperature",
                            "stream",
                            "system_message",
                            "seed"
                        ],
                        "frozen": false,
                        "icon": "OpenAI",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Text",
                                "method": "text_response",
                                "name": "text_output",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "cache": true,
                                "display_name": "Language Model",
                                "method": "build_model",
                                "name": "model_output",
                                "selected": "LanguageModel",
                                "types": [
                                    "LanguageModel"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:\n        # self.output_schea is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict)\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n"
                            },
                            "input_value": {
                                "advanced": false,
                                "display_name": "Input",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "max_tokens": {
                                "advanced": true,
                                "display_name": "Max Tokens",
                                "dynamic": false,
                                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                "list": false,
                                "name": "max_tokens",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "int",
                                "value": ""
                            },
                            "model_kwargs": {
                                "advanced": true,
                                "display_name": "Model Kwargs",
                                "dynamic": false,
                                "info": "",
                                "list": false,
                                "name": "model_kwargs",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "dict",
                                "value": {}
                            },
                            "model_name": {
                                "advanced": false,
                                "display_name": "Model Name",
                                "dynamic": false,
                                "info": "",
                                "name": "model_name",
                                "options": [
                                    "gpt-4o",
                                    "gpt-4-turbo",
                                    "gpt-4-turbo-preview",
                                    "gpt-3.5-turbo",
                                    "gpt-3.5-turbo-0125"
                                ],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": "gpt-3.5-turbo"
                            },
                            "openai_api_base": {
                                "advanced": true,
                                "display_name": "OpenAI API Base",
                                "dynamic": false,
                                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                "list": false,
                                "load_from_db": false,
                                "name": "openai_api_base",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "openai_api_key": {
                                "advanced": false,
                                "display_name": "OpenAI API Key",
                                "dynamic": false,
                                "info": "The OpenAI API Key to use for the OpenAI model.",
                                "input_types": [],
                                "load_from_db": true,
                                "name": "openai_api_key",
                                "password": true,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "output_schema": {
                                "advanced": true,
                                "display_name": "Schema",
                                "dynamic": false,
                                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                                "list": true,
                                "name": "output_schema",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "dict",
                                "value": {}
                            },
                            "seed": {
                                "advanced": true,
                                "display_name": "Seed",
                                "dynamic": false,
                                "info": "The seed controls the reproducibility of the job.",
                                "list": false,
                                "name": "seed",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "int",
                                "value": 1
                            },
                            "stream": {
                                "advanced": true,
                                "display_name": "Stream",
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "list": false,
                                "name": "stream",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "bool",
                                "value": false
                            },
                            "system_message": {
                                "advanced": true,
                                "display_name": "System Message",
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "list": false,
                                "load_from_db": false,
                                "name": "system_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "temperature": {
                                "advanced": false,
                                "display_name": "Temperature",
                                "dynamic": false,
                                "info": "",
                                "list": false,
                                "name": "temperature",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "float",
                                "value": 0.1
                            }
                        }
                    },
                    "type": "OpenAIModel"
                },
                "dragging": false,
                "height": 623,
                "id": "OpenAIModel-slJZS",
                "position": {
                    "x": 1968.999112433115,
                    "y": 528.8142375467121
                },
                "positionAbsolute": {
                    "x": 1968.999112433115,
                    "y": 528.8142375467121
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            },
            {
                "data": {
                    "id": "ChatOutput-LkJX7",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "documentation": "",
                        "field_order": [
                            "input_value",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template"
                        ],
                        "frozen": false,
                        "icon": "ChatOutput",
                        "output_types": [],
                        "outputs": [
                            {
                                "cache": true,
                                "display_name": "Message",
                                "method": "message_response",
                                "name": "message",
                                "selected": "Message",
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.io import DropdownInput, Output, MessageTextInput\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if self.session_id and isinstance(message, Message) and isinstance(message.text, str):\n            self.store_message(message)\n            self.message.value = message\n\n        self.status = message\n        return message\n"
                            },
                            "data_template": {
                                "advanced": true,
                                "display_name": "Data Template",
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "input_types": [
                                    "Message",
                                    "str"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "data_template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": "{text}"
                            },
                            "input_value": {
                                "advanced": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "input_types": [
                                    "Message",
                                    "str"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "sender": {
                                "advanced": true,
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": "Machine"
                            },
                            "sender_name": {
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message",
                                    "str"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": "AI"
                            },
                            "session_id": {
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "input_types": [
                                    "Message",
                                    "str"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            }
                        }
                    },
                    "type": "ChatOutput"
                },
                "dragging": false,
                "height": 309,
                "id": "ChatOutput-LkJX7",
                "position": {
                    "x": 2668.5087497211402,
                    "y": 859.3268817022193
                },
                "positionAbsolute": {
                    "x": 2668.5087497211402,
                    "y": 859.3268817022193
                },
                "selected": false,
                "type": "genericNode",
                "width": 384
            }
        ],
        "viewport": {
            "x": 40.848461446679266,
            "y": 89.0650521913791,
            "zoom": 0.3782109149354305
        }
    },
    "description": "This flow can be used to create a blog post following instructions from the user, using two other blogs as reference.",
    "endpoint_name": null,
    "id": "abcd5472-71fb-431c-9a08-6fd7781ffaa4",
    "is_component": false,
    "last_tested_version": "1.0.0a61",
    "name": "Blog Writer"
}